// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module vadd_compute_add (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        size_dout,
        size_num_data_valid,
        size_fifo_cap,
        size_empty_n,
        size_read,
        size_c_din,
        size_c_num_data_valid,
        size_c_fifo_cap,
        size_c_full_n,
        size_c_write,
        inStream1_dout,
        inStream1_num_data_valid,
        inStream1_fifo_cap,
        inStream1_empty_n,
        inStream1_read,
        inStream2_dout,
        inStream2_num_data_valid,
        inStream2_fifo_cap,
        inStream2_empty_n,
        inStream2_read,
        outStream_din,
        outStream_num_data_valid,
        outStream_fifo_cap,
        outStream_full_n,
        outStream_write,
        ap_ext_blocking_n,
        ap_str_blocking_n,
        ap_int_blocking_n
);

parameter    ap_ST_fsm_state1 = 3'd1;
parameter    ap_ST_fsm_state2 = 3'd2;
parameter    ap_ST_fsm_state3 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] size_dout;
input  [2:0] size_num_data_valid;
input  [2:0] size_fifo_cap;
input   size_empty_n;
output   size_read;
output  [31:0] size_c_din;
input  [2:0] size_c_num_data_valid;
input  [2:0] size_c_fifo_cap;
input   size_c_full_n;
output   size_c_write;
input  [31:0] inStream1_dout;
input  [2:0] inStream1_num_data_valid;
input  [2:0] inStream1_fifo_cap;
input   inStream1_empty_n;
output   inStream1_read;
input  [31:0] inStream2_dout;
input  [2:0] inStream2_num_data_valid;
input  [2:0] inStream2_fifo_cap;
input   inStream2_empty_n;
output   inStream2_read;
output  [31:0] outStream_din;
input  [2:0] outStream_num_data_valid;
input  [2:0] outStream_fifo_cap;
input   outStream_full_n;
output   outStream_write;
output   ap_ext_blocking_n;
output   ap_str_blocking_n;
output   ap_int_blocking_n;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg inStream1_read;
reg inStream2_read;
reg outStream_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    size_blk_n;
reg    size_c_blk_n;
reg   [31:0] size_read_reg_63;
reg    ap_block_state1;
wire    grp_compute_add_Pipeline_execute_fu_52_ap_start;
wire    grp_compute_add_Pipeline_execute_fu_52_ap_done;
wire    grp_compute_add_Pipeline_execute_fu_52_ap_idle;
wire    grp_compute_add_Pipeline_execute_fu_52_ap_ready;
wire    grp_compute_add_Pipeline_execute_fu_52_inStream1_read;
wire    grp_compute_add_Pipeline_execute_fu_52_inStream2_read;
wire   [31:0] grp_compute_add_Pipeline_execute_fu_52_outStream_din;
wire    grp_compute_add_Pipeline_execute_fu_52_outStream_write;
wire    grp_compute_add_Pipeline_execute_fu_52_ap_ext_blocking_n;
wire    grp_compute_add_Pipeline_execute_fu_52_ap_str_blocking_n;
wire    grp_compute_add_Pipeline_execute_fu_52_ap_int_blocking_n;
reg    grp_compute_add_Pipeline_execute_fu_52_ap_start_reg;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
reg    size_read_local;
reg    size_c_write_local;
reg   [2:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
wire    ap_int_blocking_cur_n;
reg    ap_ext_blocking_sub_n;
reg    ap_wait_0;
reg    ap_sub_ext_blocking_0;
reg    ap_str_blocking_sub_n;
reg    ap_sub_str_blocking_0;
reg    ap_int_blocking_sub_n;
reg    ap_sub_int_blocking_0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 3'd1;
#0 grp_compute_add_Pipeline_execute_fu_52_ap_start_reg = 1'b0;
end

vadd_compute_add_Pipeline_execute grp_compute_add_Pipeline_execute_fu_52(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_compute_add_Pipeline_execute_fu_52_ap_start),
    .ap_done(grp_compute_add_Pipeline_execute_fu_52_ap_done),
    .ap_idle(grp_compute_add_Pipeline_execute_fu_52_ap_idle),
    .ap_ready(grp_compute_add_Pipeline_execute_fu_52_ap_ready),
    .inStream1_dout(inStream1_dout),
    .inStream1_num_data_valid(3'd0),
    .inStream1_fifo_cap(3'd0),
    .inStream1_empty_n(inStream1_empty_n),
    .inStream1_read(grp_compute_add_Pipeline_execute_fu_52_inStream1_read),
    .inStream2_dout(inStream2_dout),
    .inStream2_num_data_valid(3'd0),
    .inStream2_fifo_cap(3'd0),
    .inStream2_empty_n(inStream2_empty_n),
    .inStream2_read(grp_compute_add_Pipeline_execute_fu_52_inStream2_read),
    .outStream_din(grp_compute_add_Pipeline_execute_fu_52_outStream_din),
    .outStream_num_data_valid(3'd0),
    .outStream_fifo_cap(3'd0),
    .outStream_full_n(outStream_full_n),
    .outStream_write(grp_compute_add_Pipeline_execute_fu_52_outStream_write),
    .size_load(size_read_reg_63),
    .ap_ext_blocking_n(grp_compute_add_Pipeline_execute_fu_52_ap_ext_blocking_n),
    .ap_str_blocking_n(grp_compute_add_Pipeline_execute_fu_52_ap_str_blocking_n),
    .ap_int_blocking_n(grp_compute_add_Pipeline_execute_fu_52_ap_int_blocking_n)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((grp_compute_add_Pipeline_execute_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_compute_add_Pipeline_execute_fu_52_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            grp_compute_add_Pipeline_execute_fu_52_ap_start_reg <= 1'b1;
        end else if ((grp_compute_add_Pipeline_execute_fu_52_ap_ready == 1'b1)) begin
            grp_compute_add_Pipeline_execute_fu_52_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read_reg_63 <= size_dout;
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((grp_compute_add_Pipeline_execute_fu_52_ap_done == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if (((grp_compute_add_Pipeline_execute_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_ext_blocking_0) == 1'b1)) begin
        ap_ext_blocking_sub_n = 1'b0;
    end else begin
        ap_ext_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_int_blocking_0) == 1'b1)) begin
        ap_int_blocking_sub_n = 1'b0;
    end else begin
        ap_int_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if (((grp_compute_add_Pipeline_execute_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_wait_0 & ap_sub_str_blocking_0) == 1'b1)) begin
        ap_str_blocking_sub_n = 1'b0;
    end else begin
        ap_str_blocking_sub_n = 1'b1;
    end
end

always @ (*) begin
    if ((grp_compute_add_Pipeline_execute_fu_52_ap_ext_blocking_n == 1'b0)) begin
        ap_sub_ext_blocking_0 = 1'b1;
    end else begin
        ap_sub_ext_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_compute_add_Pipeline_execute_fu_52_ap_int_blocking_n == 1'b0)) begin
        ap_sub_int_blocking_0 = 1'b1;
    end else begin
        ap_sub_int_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((grp_compute_add_Pipeline_execute_fu_52_ap_str_blocking_n == 1'b0)) begin
        ap_sub_str_blocking_0 = 1'b1;
    end else begin
        ap_sub_str_blocking_0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_ST_fsm_state3 == ap_CS_fsm)) begin
        ap_wait_0 = 1'b1;
    end else begin
        ap_wait_0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream1_read = grp_compute_add_Pipeline_execute_fu_52_inStream1_read;
    end else begin
        inStream1_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        inStream2_read = grp_compute_add_Pipeline_execute_fu_52_inStream2_read;
    end else begin
        inStream2_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        outStream_write = grp_compute_add_Pipeline_execute_fu_52_outStream_write;
    end else begin
        outStream_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_blk_n = size_empty_n;
    end else begin
        size_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        size_c_blk_n = size_c_full_n;
    end else begin
        size_c_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_c_write_local = 1'b1;
    end else begin
        size_c_write_local = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
        size_read_local = 1'b1;
    end else begin
        size_read_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b0 == ap_block_state1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((grp_compute_add_Pipeline_execute_fu_52_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (size_c_full_n == 1'b0) | (size_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_ext_blocking_n = (ap_ext_blocking_sub_n & 1'b1);

assign ap_int_blocking_cur_n = (size_c_blk_n & size_blk_n);

assign ap_int_blocking_n = (ap_int_blocking_sub_n & ap_int_blocking_cur_n);

assign ap_str_blocking_n = (ap_str_blocking_sub_n & 1'b1);

assign grp_compute_add_Pipeline_execute_fu_52_ap_start = grp_compute_add_Pipeline_execute_fu_52_ap_start_reg;

assign outStream_din = grp_compute_add_Pipeline_execute_fu_52_outStream_din;

assign size_c_din = size_dout;

assign size_c_write = size_c_write_local;

assign size_read = size_read_local;

endmodule //vadd_compute_add
