-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vadd_compute_add is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    size_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    size_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_empty_n : IN STD_LOGIC;
    size_read : OUT STD_LOGIC;
    size_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    size_c_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    size_c_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    size_c_full_n : IN STD_LOGIC;
    size_c_write : OUT STD_LOGIC;
    inStream1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    inStream1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    inStream1_empty_n : IN STD_LOGIC;
    inStream1_read : OUT STD_LOGIC;
    inStream2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    inStream2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    inStream2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    inStream2_empty_n : IN STD_LOGIC;
    inStream2_read : OUT STD_LOGIC;
    outStream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    outStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    outStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    outStream_full_n : IN STD_LOGIC;
    outStream_write : OUT STD_LOGIC;
    ap_ext_blocking_n : OUT STD_LOGIC;
    ap_str_blocking_n : OUT STD_LOGIC;
    ap_int_blocking_n : OUT STD_LOGIC );
end;


architecture behav of vadd_compute_add is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal size_blk_n : STD_LOGIC;
    signal size_c_blk_n : STD_LOGIC;
    signal size_read_reg_63 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal grp_compute_add_Pipeline_execute_fu_52_ap_start : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_ap_done : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_ap_idle : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_ap_ready : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_inStream1_read : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_inStream2_read : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_outStream_din : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_add_Pipeline_execute_fu_52_outStream_write : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_ap_ext_blocking_n : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_ap_str_blocking_n : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_ap_int_blocking_n : STD_LOGIC;
    signal grp_compute_add_Pipeline_execute_fu_52_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal size_read_local : STD_LOGIC;
    signal size_c_write_local : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_int_blocking_cur_n : STD_LOGIC;
    signal ap_ext_blocking_sub_n : STD_LOGIC;
    signal ap_wait_0 : STD_LOGIC;
    signal ap_sub_ext_blocking_0 : STD_LOGIC;
    signal ap_str_blocking_sub_n : STD_LOGIC;
    signal ap_sub_str_blocking_0 : STD_LOGIC;
    signal ap_int_blocking_sub_n : STD_LOGIC;
    signal ap_sub_int_blocking_0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component vadd_compute_add_Pipeline_execute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        inStream1_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream1_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        inStream1_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        inStream1_empty_n : IN STD_LOGIC;
        inStream1_read : OUT STD_LOGIC;
        inStream2_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        inStream2_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        inStream2_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        inStream2_empty_n : IN STD_LOGIC;
        inStream2_read : OUT STD_LOGIC;
        outStream_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        outStream_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
        outStream_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
        outStream_full_n : IN STD_LOGIC;
        outStream_write : OUT STD_LOGIC;
        size_load : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_ext_blocking_n : OUT STD_LOGIC;
        ap_str_blocking_n : OUT STD_LOGIC;
        ap_int_blocking_n : OUT STD_LOGIC );
    end component;



begin
    grp_compute_add_Pipeline_execute_fu_52 : component vadd_compute_add_Pipeline_execute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_add_Pipeline_execute_fu_52_ap_start,
        ap_done => grp_compute_add_Pipeline_execute_fu_52_ap_done,
        ap_idle => grp_compute_add_Pipeline_execute_fu_52_ap_idle,
        ap_ready => grp_compute_add_Pipeline_execute_fu_52_ap_ready,
        inStream1_dout => inStream1_dout,
        inStream1_num_data_valid => ap_const_lv3_0,
        inStream1_fifo_cap => ap_const_lv3_0,
        inStream1_empty_n => inStream1_empty_n,
        inStream1_read => grp_compute_add_Pipeline_execute_fu_52_inStream1_read,
        inStream2_dout => inStream2_dout,
        inStream2_num_data_valid => ap_const_lv3_0,
        inStream2_fifo_cap => ap_const_lv3_0,
        inStream2_empty_n => inStream2_empty_n,
        inStream2_read => grp_compute_add_Pipeline_execute_fu_52_inStream2_read,
        outStream_din => grp_compute_add_Pipeline_execute_fu_52_outStream_din,
        outStream_num_data_valid => ap_const_lv3_0,
        outStream_fifo_cap => ap_const_lv3_0,
        outStream_full_n => outStream_full_n,
        outStream_write => grp_compute_add_Pipeline_execute_fu_52_outStream_write,
        size_load => size_read_reg_63,
        ap_ext_blocking_n => grp_compute_add_Pipeline_execute_fu_52_ap_ext_blocking_n,
        ap_str_blocking_n => grp_compute_add_Pipeline_execute_fu_52_ap_str_blocking_n,
        ap_int_blocking_n => grp_compute_add_Pipeline_execute_fu_52_ap_int_blocking_n);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((grp_compute_add_Pipeline_execute_fu_52_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_add_Pipeline_execute_fu_52_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_add_Pipeline_execute_fu_52_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    grp_compute_add_Pipeline_execute_fu_52_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_add_Pipeline_execute_fu_52_ap_ready = ap_const_logic_1)) then 
                    grp_compute_add_Pipeline_execute_fu_52_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                size_read_reg_63 <= size_dout;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1, grp_compute_add_Pipeline_execute_fu_52_ap_done, ap_CS_fsm_state3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_compute_add_Pipeline_execute_fu_52_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1)
    begin
        if ((ap_const_boolean_1 = ap_block_state1)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_compute_add_Pipeline_execute_fu_52_ap_done)
    begin
        if ((grp_compute_add_Pipeline_execute_fu_52_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, size_empty_n, size_c_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (size_c_full_n = ap_const_logic_0) or (size_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, grp_compute_add_Pipeline_execute_fu_52_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_compute_add_Pipeline_execute_fu_52_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_ext_blocking_n <= (ap_ext_blocking_sub_n and ap_const_logic_1);

    ap_ext_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_ext_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_ext_blocking_0) = ap_const_logic_1)) then 
            ap_ext_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_ext_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_int_blocking_cur_n <= (size_c_blk_n and size_blk_n);
    ap_int_blocking_n <= (ap_int_blocking_sub_n and ap_int_blocking_cur_n);

    ap_int_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_int_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_int_blocking_0) = ap_const_logic_1)) then 
            ap_int_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_int_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_compute_add_Pipeline_execute_fu_52_ap_done, ap_CS_fsm_state3)
    begin
        if (((grp_compute_add_Pipeline_execute_fu_52_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_str_blocking_n <= (ap_str_blocking_sub_n and ap_const_logic_1);

    ap_str_blocking_sub_n_assign_proc : process(ap_wait_0, ap_sub_str_blocking_0)
    begin
        if (((ap_wait_0 and ap_sub_str_blocking_0) = ap_const_logic_1)) then 
            ap_str_blocking_sub_n <= ap_const_logic_0;
        else 
            ap_str_blocking_sub_n <= ap_const_logic_1;
        end if; 
    end process;


    ap_sub_ext_blocking_0_assign_proc : process(grp_compute_add_Pipeline_execute_fu_52_ap_ext_blocking_n)
    begin
        if ((grp_compute_add_Pipeline_execute_fu_52_ap_ext_blocking_n = ap_const_logic_0)) then 
            ap_sub_ext_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_ext_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_int_blocking_0_assign_proc : process(grp_compute_add_Pipeline_execute_fu_52_ap_int_blocking_n)
    begin
        if ((grp_compute_add_Pipeline_execute_fu_52_ap_int_blocking_n = ap_const_logic_0)) then 
            ap_sub_int_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_int_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sub_str_blocking_0_assign_proc : process(grp_compute_add_Pipeline_execute_fu_52_ap_str_blocking_n)
    begin
        if ((grp_compute_add_Pipeline_execute_fu_52_ap_str_blocking_n = ap_const_logic_0)) then 
            ap_sub_str_blocking_0 <= ap_const_logic_1;
        else 
            ap_sub_str_blocking_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_wait_0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_fsm_state3 = ap_CS_fsm)) then 
            ap_wait_0 <= ap_const_logic_1;
        else 
            ap_wait_0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_compute_add_Pipeline_execute_fu_52_ap_start <= grp_compute_add_Pipeline_execute_fu_52_ap_start_reg;

    inStream1_read_assign_proc : process(grp_compute_add_Pipeline_execute_fu_52_inStream1_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inStream1_read <= grp_compute_add_Pipeline_execute_fu_52_inStream1_read;
        else 
            inStream1_read <= ap_const_logic_0;
        end if; 
    end process;


    inStream2_read_assign_proc : process(grp_compute_add_Pipeline_execute_fu_52_inStream2_read, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            inStream2_read <= grp_compute_add_Pipeline_execute_fu_52_inStream2_read;
        else 
            inStream2_read <= ap_const_logic_0;
        end if; 
    end process;

    outStream_din <= grp_compute_add_Pipeline_execute_fu_52_outStream_din;

    outStream_write_assign_proc : process(grp_compute_add_Pipeline_execute_fu_52_outStream_write, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            outStream_write <= grp_compute_add_Pipeline_execute_fu_52_outStream_write;
        else 
            outStream_write <= ap_const_logic_0;
        end if; 
    end process;


    size_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_blk_n <= size_empty_n;
        else 
            size_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    size_c_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, size_c_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_c_blk_n <= size_c_full_n;
        else 
            size_c_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    size_c_din <= size_dout;
    size_c_write <= size_c_write_local;

    size_c_write_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_c_write_local <= ap_const_logic_1;
        else 
            size_c_write_local <= ap_const_logic_0;
        end if; 
    end process;

    size_read <= size_read_local;

    size_read_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1)
    begin
        if (((ap_const_boolean_0 = ap_block_state1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            size_read_local <= ap_const_logic_1;
        else 
            size_read_local <= ap_const_logic_0;
        end if; 
    end process;

end behav;
